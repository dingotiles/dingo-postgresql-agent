FROM alpine:3.4

ENV PG_VERSION=9.6

# python3, wal-3
# https://gist.github.com/wr0ngway/b4a4ede02b1219817a6dfce092e1e3fa
# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8
# gpg: key F73C700D: public key "Larry Hastings <larry@hastings.org>" imported
ENV PYTHON_VERSION 3.5.1

# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 8.1.2

ENV GPG_KEY 97FC712E4C024BBEA48A61ED3A5CA953F73C700D
RUN set -ex \
	&& apk add --no-cache --virtual .fetch-deps curl gnupg \
	&& curl -fSL "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" -o python.tar.xz \
	&& curl -fSL "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" -o python.tar.xz.asc \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& rm -r "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src \
	&& tar -xJC /usr/src -f python.tar.xz \
	&& mv "/usr/src/Python-$PYTHON_VERSION" /usr/src/python3 \
	&& rm python.tar.xz \
	&& apk del .fetch-deps \
	\
	&& apk add --no-cache --virtual .build-deps  \
		bzip2-dev \
		gcc \
		libc-dev \
		linux-headers \
		make \
		ncurses-dev \
		openssl-dev \
		pax-utils \
		readline-dev \
		sqlite-dev \
		xz-dev \
		zlib-dev \
	&& cd /usr/src/python3 \
	&& ./configure --enable-shared --enable-unicode=ucs4 --with-pydebug \
	&& make -j$(getconf _NPROCESSORS_ONLN) CFLAGS="-g -fno-inline -fno-strict-aliasing" \
	&& make install \
	&& pip3 install --no-cache-dir --upgrade --ignore-installed pip==$PYTHON_PIP_VERSION \
	&& find /usr/local -depth \
		\( \
		    \( -type d -a -name test -o -name tests \) \
		    -o \
		    \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
		\) -exec rm -rf '{}' + \
	&& runDeps="$( \
		scanelf --needed --nobanner --recursive /usr/local \
			| awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
			| sort -u \
			| xargs -r apk info --installed \
			| sort -u \
	)" \
	&& apk add --virtual .python-rundeps $runDeps \
	&& apk del .build-deps \
	&& rm -rf ~/.cache

RUN echo "add-auto-load-safe-path /usr/src/python3" > /root/.gdbinit

# PostgreSQL
RUN set -x \
    && echo "@edge http://nl.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories \
    && apk update && apk add curl "postgresql@edge>9.6" "postgresql-contrib@edge>9.6" "postgresql-dev@edge>9.6"

ENV POSTGIS_VERSION 2.2.2
# https://hub.docker.com/r/unocha/alpine-base-postgis/~/dockerfile/
RUN echo "@testing http://nl.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories && \
    apk add --update --no-cache \
        perl \
        file \
        geos@testing \
        geos-dev@testing \
        libxml2-dev \
        gdal@testing \
        gdal-dev@testing \
        proj4@testing \
        proj4-dev@testing \
        gcc \
        make \
        libgcc g++ && \
    cd /tmp && \
    wget http://download.osgeo.org/postgis/source/postgis-${POSTGIS_VERSION}.tar.gz -O - | tar -xz && \
    chown root:root -R postgis-${POSTGIS_VERSION} && \
    cd /tmp/postgis-${POSTGIS_VERSION} && \
    ./configure && \
    echo "PERL = /usr/bin/perl" >> extensions/postgis/Makefile && \
    echo "PERL = /usr/bin/perl" >> extensions/postgis_topology/Makefile && \
    make -s && \
    make -s install  && \
    cd / && \
    rm -rf /tmp/postgis-${POSTGIS_VERSION} && \
    apk del perl file geos-dev \
            libxml2-dev gdal-dev proj4-dev \
            gcc make libgcc g++


ENV WALE_VERSION=1.0.2
RUN set -x \
      && apk add --update bash sed jq curl alpine-sdk linux-headers musl-dev \
      && apk add --update bash sed jq curl alpine-sdk linux-headers musl-dev \
      && python3 -m ensurepip \
      && pip3 install --upgrade pip setuptools \
      && rm -rf /root/.cache \
      && rm -rf /var/cache/apk/* \
      && pip3 install --no-cache-dir wal-e[aws,azure,google,swift]==${WALE_VERSION} awscli envdir pgxnclient --upgrade

# For python3 without debugging
#RUN set -x \
#      && apk add --update bash sed python3 python3-dev jq curl alpine-sdk linux-headers musl-dev \
#      && apk add --update bash sed jq curl alpine-sdk linux-headers musl-dev \
#      && python3 -m ensurepip \
#      && rm -r /usr/lib/python*/ensurepip \
#      && pip3 install --upgrade pip setuptools \
#      && rm -rf /root/.cache \
#      && rm -rf /var/cache/apk/* \
#      && pip3 install --no-cache-dir wal-e[aws,azure,google,swift]==${WALE_VERSION} awscli envdir pgxnclient --upgrade

# python2, dumb-init, supervisor
ENV SUPERVISOR_VERSION=3.3.1
# RUN set -x \
#       && apk add --update bash python py-pip \
#       && rm -rf /var/cache/apk/* \
#       && pip install --upgrade pip setuptools \
#       && pip install --no-cache-dir supervisor==${SUPERVISOR_VERSION} dumb-init --upgrade

# etcdctl
RUN set -x \
      && curl -sL https://github.com/coreos/etcd/releases/download/v2.3.4/etcd-v2.3.4-linux-amd64.tar.gz -o /tmp/etcd-v2.3.4-linux-amd64.tar.gz \
      && tar xzvf /tmp/etcd-v2.3.4-linux-amd64.tar.gz -C /tmp \
      && mv /tmp/etcd-v2.3.4-linux-amd64/etcdctl /usr/local/bin \
      && rm -rf /tmp/etcd*

ENV PATRONI_VERSION=1.1
RUN set -x \
    && curl -sL https://github.com/zalando/patroni/archive/v${PATRONI_VERSION}.tar.gz -o /tmp/patroni-${PATRONI_VERSION}.tar.gz \
    && tar xfz /tmp/patroni-${PATRONI_VERSION}.tar.gz \
    && mv /patroni-${PATRONI_VERSION} /patroni \
    && pip3 install --no-cache-dir -r /patroni/requirements.txt --upgrade \
    && rm -rf /root/.cache
#    && echo "pytz" >> /patroni/requirements.txt \

# 5432: PostgreSQL server
# 8008: Patroni API
EXPOSE 5432 8008

# Expose our data directory
VOLUME ["/data"]
ENV DATA_VOLUME=/data

CMD ["/bin/true"]
