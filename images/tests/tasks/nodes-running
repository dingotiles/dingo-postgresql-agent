#!/bin/bash

set -e -u

expected_number_of_nodes=${1}

# Leader is running
leader_name=$(curl -sk ${ETCD_URI:?required}/v2/keys/service/${PATRONI_SCOPE}/leader | jq -r '.node.value')
leader_uri=$(curl -sk ${ETCD_URI}/v2/keys/service/${PATRONI_SCOPE}/members/${leader_name} | jq -r '.node.value' | jq -r '.conn_url')
superuser_uri=$(echo ${leader_uri} \
  | sed "s%postgres://%postgres://${SUPERUSER_USERNAME}:${SUPERUSER_PASSWORD}@%")

echo leader_name: $leader_name
echo leader_uri: $leader_uri
echo superuser_uri: $superuser_uri

leader_state=$(curl -sk ${ETCD_URI}/v2/keys/service/${PATRONI_SCOPE}/members/${leader_name} | jq -r '.node.value' | jq -r '.state')
echo leader_state: $leader_state

if psql ${superuser_uri} -c 'SELECT current_database();' > /dev/null 2>&1; then
  leader_accessible='true'
else
  if [[ "${leader_accessible:-}X" == "X" ]]; then
    echo "Trying to access database at URI ${superuser_uri} ..."
    curl -sk "${ETCD_URI:?required}/v2/keys/service/"
    curl -sk "${ETCD_URI:?required}/v2/keys/service/${PATRONI_SCOPE}/members/?recursive=true"
    curl -sk "${ETCD_URI:?required}/v2/keys/service/${PATRONI_SCOPE}/leader"
    curl -sk "${ETCD_URI:?required}/v2/keys/service/${PATRONI_SCOPE}/?recursive=true"
  fi
  leader_accessible='false'
fi

# All members are running
found=$(curl -s ${ETCD_URI}/v2/keys/service/${PATRONI_SCOPE}/members?recursive=true \
   | jq -r '.node.nodes[].value | fromjson | .state' \
   | grep "running" \
   | wc -l \
   | tr -d '[[:space:]]')


echo "Expected number of nodes running: ${expected_number_of_nodes}, Registered: ${found}, leader_state: ${leader_state}, leader_accessible: ${leader_accessible}"

[[ "${leader_accessible}" == "true" ]] || exit 1
[[ "${leader_state}" == "running" ]] || exit 1
[[ ${found} == ${expected_number_of_nodes} ]] || exit 1
